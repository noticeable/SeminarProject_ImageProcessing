/*exercise 5 - Affine transforms */

/*
	A F F I N E  -  Transformation: Rotation
*/
struct Image RotateImage(struct Image *Img_src, struct Image *Img_dst, float RotationAngle, struct point_xy CentralPoint)
{
	float Sx, Matrix[2][2], Cos, Sin;
	int i, j, z ;
	int x_new = 0, y_new = 0;
	int someValue = 0;
	int valToDelene = 0;
	int currentPixel_smallImage = 0;

	//SetDestination(Img_src, Img_dst);

	Sx = (-RotationAngle * 3.14) / 180;
	Cos = cos(Sx);
	Sin = sin(Sx);
	Matrix[0][0] = Cos;
	Matrix[0][1] = -Sin;
	Matrix[1][0] = Sin;
	Matrix[1][1] = Cos;

	for (i = 0; i < Img_dst->Height; i++)
	{
		for (j = 0; j < Img_dst->Width; j++)
		{
			// za vsqko i,j (ot staoroto izobrajenie se namirat novi x_new  i  y_new na koito s epipisvat stoinostite za RGB
			x_new = Matrix[0][0] * (j - CentralPoint.X) + Matrix[0][1] * (i - CentralPoint.Y) + CentralPoint.X;
			y_new = Matrix[1][0] * (j - CentralPoint.X) + Matrix[1][1] * (i - CentralPoint.Y) + CentralPoint.Y;
			if (x_new > Img_dst->Width) x_new = Img_dst->Width;
			if (x_new < 0) x_new = 0;
			if (y_new > Img_dst->Height) y_new = Img_dst->Height;
			if (y_new < 0) y_new = 0;
			
			for(z = 0; z < Img_dst->Num_channels; z++)
			{
				//if(Img_dst->rgbpix[y_new * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * x_new + z] == 0 )
					Img_dst->rgbpix[y_new * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * x_new + z] = Img_src->rgbpix[i * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * j + z];
				//else
				//	Img_dst->rgbpix[y_new * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * x_new + z] = Img_dst->rgbpix[(y_new) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (x_new) + z];
			}
		}
	}
	for (i = 1; i < Img_dst->Height-1; i++)
	{
		for (j = 1; j < Img_dst->Width-1; j++)
		{
			for(z = 0; z < Img_dst->Num_channels; z++)
			{
				someValue = 0;
				valToDelene = 0;
				if(Img_dst->rgbpix[i * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * j + z] == 0 )
				{
					if(Img_dst->rgbpix[(i-1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j-1) + z] != 0) {someValue += Img_dst->rgbpix[(i-1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j-1) + z]; valToDelene++;}
					if(Img_dst->rgbpix[(i-1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j+1) + z] != 0) {someValue += Img_dst->rgbpix[(i-1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j+1) + z]; valToDelene++;}
					if(Img_dst->rgbpix[(i+1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j-1) + z] != 0) {someValue += Img_dst->rgbpix[(i+1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j-1) + z]; valToDelene++;}
					if(Img_dst->rgbpix[(i+1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j+1) + z] != 0) {someValue += Img_dst->rgbpix[(i+1) * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * (j+1) + z]; valToDelene++;}

					if(someValue != 0  &&  valToDelene >= 3) 
					{
						if(someValue / (valToDelene) <=255) 
							Img_dst->rgbpix[i * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * j + z] = someValue / (valToDelene);
						else
							Img_dst->rgbpix[i * Img_dst->Num_channels * Img_dst->Width + Img_dst->Num_channels * j + z] = 255;
					}
				}
			}
		}
	}
	return *Img_dst;
}

/*
	A F F I N E  - scale (zoom) image - in/out
*/
struct Image ScaleImage(struct Image *Img_src, struct Image *Img_dst, float ScalePercentage)
{
	int i, j, z;
	int NewX = 0;
	int NewY = 0;

	/* Modify Img_dst */
	Img_dst->Width = Img_src->Width * (1 + (ScalePercentage / 100.0));
	Img_dst->Height = Img_src->Height * (1 + (ScalePercentage / 100.0));
	Img_dst->rgbpix = (unsigned char *)realloc(Img_dst->rgbpix, Img_dst->Height * Img_dst->Width * Img_dst->Num_channels* sizeof(unsigned char));

	if (ScalePercentage < 0)
	{
		for (i = 0; i < Img_dst->Height; i++)
		{
			for (j = 0; j < Img_dst->Width; j++)
			{
				NewX = j / (1 + (ScalePercentage / 100.0)); // Plus Sign because of the negative Scale Value
				NewY = i / (1 + (ScalePercentage / 100.0));

				if (NewX < 0) NewX = 0;
				if (NewY < 0) NewY = 0;
				if (NewX >= Img_src->Width) NewX = Img_src->Width - 1;
				if (NewY >= Img_src->Height) NewY = Img_src->Height - 1;

				for(z = 0; z < Img_dst->Num_channels; z++)
				{
					Img_dst->rgbpix[Img_dst->Num_channels * (i*Img_dst->Width + j) + z ] = Img_src->rgbpix[Img_dst->Num_channels * ((NewY)*Img_src->Width + (NewX)) + z ];
				}
			}
		}
	}
	else if (ScalePercentage > 0)
	{
		for (i = 0; i < Img_dst->Height; i++)
		{
			for (j = 0; j < Img_dst->Width; j++)
			{
				NewX = j / (1 + (ScalePercentage / 100));
				NewY = i / (1 + (ScalePercentage / 100));

				if (NewX < 0) NewX = 0;
				if (NewY < 0) NewY = 0;
				if (NewX >= Img_src->Width) NewX = Img_src->Width - 1;
				if (NewY >= Img_src->Height) NewY = Img_src->Height - 1;

				for(z = 0; z < Img_dst->Num_channels; z++)
				{
					Img_dst->rgbpix[Img_dst->Num_channels * (i*Img_dst->Width + j) + z ] = Img_src->rgbpix[Img_dst->Num_channels * ((NewY)*Img_src->Width + (NewX)) + z ];
				}
			}
		}
	}
	else return *Img_src;

	return *Img_dst;
}